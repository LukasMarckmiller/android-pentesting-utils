# check device arch
# install tcpdump depending on arch from https://github.com/extremecoders-re/tcpdump-android-builds/releases/latest
# getprop ro.product.cpu.abi   x86, armeabi-v7a, armeabi
# adb shell su -c 'command'
# curl -sL https://github.com/extremecoders-re/tcpdump-android-builds/releases/latest | grep -E 'tcpdump-x86.zip' | grep -Eo 'https://[^\"]*' | xargs wget

import subprocess
import sys,os
import requests, re
import zipfile
from threading import Thread
interface = 'wlan0'
root = True
tcpdump_source = 'https://github.com/extremecoders-re/tcpdump-android-builds/releases/latest'
tcpdump_port = 11111

def startTcpDump(cmd):
    out = subprocess.Popen(['adb', 'shell'], stdin=subprocess.PIPE)
    out.communicate(cmd.encode())
    if out.returncode:
        print('[!] Error cant start tcpdump on interface={}, port={}, args{}.'.format(interface ,tcpdump_port, out.stdout))
        sys.exit(1)
    return out

print('[*] Checking Environment',end='\r')

out = subprocess.run(['command','-v','adb'], shell=True)
if out.returncode:
    print('[!] adb not installed. Run \'apt install adb first\'.')
    sys.exit(1)

out = subprocess.run(['command','-v','wireshark'], shell=True)
if out.returncode:
    print('[!] wireshark not installed. Run \'apt install wireshark first\'.')
    sys.exit(1)

try:
    ret = subprocess.check_output(['adb','shell', 'getprop ro.product.cpu.abi']).decode('utf-8').rstrip()
    arch = 'UNKNOWN'
    if ret == 'x86':
        arch = 'x86'
    elif ret == 'armeabi-v7a':
        arch = 'arm'
    elif arch == 'arm64-v8a':
        arch = 'arm64'
    else:
        print('[!] Unknown processor architecture. No android tcpdump binary for this arch {}.'.format(ret))
        sys.exit(1)

except subprocess.CalledProcessError as err:
        print('[!] Error determing system arch. ERR: {}. Maby device offline? Check \'adb devices -l\''.format(err.output))
        sys.exit(1)

#Download tcpdump for android
resp = requests.get('https://github.com/extremecoders-re/tcpdump-android-builds/releases/latest', allow_redirects=True)
if (resp.status_code != 200):
    print('[!] Cant reach source of tcpdump for android. (Does https://github.com/extremecoders-re/tcpdump-android-builds/releases/latest exists?)')
    sys.exit(1)

tcpdump_zip = 'tcpdump-' + arch + '.zip'
r = re.search('https://[^\"]*' + tcpdump_zip, resp.text)
tcpdump_download = resp.text[r.start():r.end()]
resp = requests.get(tcpdump_download, allow_redirects=True)
if (resp.status_code != 200):
    print('[!] Cant download tcpdump. Err {}'.format(resp.text))
    sys.exit(1)
with open(tcpdump_zip, 'wb') as f:
    f.write(resp.content)

tcpdump_exec = 'tcpdump-' + arch
with zipfile.ZipFile(tcpdump_zip,'r') as zip:
	zip.extract(tcpdump_exec)

print('[+] Environment looks fine. All needed tools are installed.')

print('[*] Installing tcpdump on device',end='\r')
try:
    out = subprocess.run(['adb','root'],timeout=5, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    if out.returncode:
        print('[!] Cant mount adb device as root. Trying non root...')
        root = False
    
    if root:
        out = subprocess.run(['adb','remount'], timeout=5, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
        if out.returncode:
            print('[!] Error cant remount adb device.')
            sys.exit(1)
        
        out = subprocess.run(['adb','push',tcpdump_exec,'/system/bin/tcpdump'], timeout=5, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
        if out.returncode:
            print('[!] Error cant push tcpdump to /system/bin/tcpdump.')
            sys.exit(1)
    else: 
        out = subprocess.run(['adb','push',tcpdump_exec,'/data/local/tmp/tcpdump'], timeout=5, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
        if out.returncode:
            print('[!] Error cant push tcpdump to /system/bin/tcpdump.')
            sys.exit(1)

        if out.returncode:
            print('[!] Error cant remount /system.')
            sys.exit(1)

        out = subprocess.run(['adb shell \"su -c \'cp /data/local/tmp/tcpdump /system/bin\'\"'], timeout=5, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT, shell=True)
        if out.returncode:
            print('[!] Error cant copy tcpdump to /system/bin.')
            sys.exit(1)

        out = subprocess.run(['adb shell \"su -c \'chmod 755 /system/bin/tcpdump\'\"'], timeout=5, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT, shell=True)
        if out.returncode:
            print('[!] Error cant change permission of /system/bin/tcpdump.')
            sys.exit(1)

    print('[+] Successfully installed tcpdump on adb device.') 

    # TODO: if wlan0 not existing prombt for one of adb shell ifconfig | cut -d' ' -f1 | awk /./
    print('[*] Invoking tcpdump on adb device', end='\r') 
    cmd = 'su -c \'tcpdump -i ' + interface + ' -s0 -w - | nc -l -p ' + str(tcpdump_port) + ' \''
    t = Thread(target=startTcpDump, args=(cmd,))

    out = subprocess.run(['adb','forward','tcp:'+ str(tcpdump_port), 'tcp:' + str(tcpdump_port)], timeout=5)
    if out.returncode:
        print('[!] Error cant forward port {}'.format(tcpdump_port))
        sys.exit(1)

except subprocess.TimeoutExpired:
    print('[!] Error cant connect to adb device. Run adb connect <host>[:<port>] first.')
    sys.exit(1)
    
print('[+] tcpdump running on adb device.') 
print('[*] Connecting tcpdump to local wireshark', end='\r') 

out = subprocess.run(['nc localhost ' + str(tcpdump_port) + ' | wireshark -k -S -i -'], shell=True, capture_output=True)
if out.returncode:
    print('[!] Cant run wireshark and listen to tcpdump locally. Stdout: {}, Stderr: {}'.format(out.stdout,out.stderr))
    sys.exit(1)

print('[+] Conntected tcpdump to local wireshark', end='\r') 
